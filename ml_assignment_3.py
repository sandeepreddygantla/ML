# -*- coding: utf-8 -*-
"""ML_Assignment_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z7FdTEr5xnnaw5eyb4uCxk7_L8LtZUIL
"""

import numpy as np
from sklearn.impute import KNNImputer

# Taking the input dataset, which may contain missing values represented as NaN.
dataset = np.array([[20, 15, np.nan],
                    [25, np.nan, 6],
                    [np.nan, 100, 18]])

dataset

# Step 2: Identify the examples with missing values in the dataset.
missing_mask = np.isnan(dataset)
missing_mask

# Step 3: For each example with missing values, find its k-nearest neighbors based on the other examples in the dataset.

k = 5  # Define the value of k for k-nearest neighbors

imputer = KNNImputer(n_neighbors=k)
imputed_dataset = imputer.fit_transform(dataset)

# Step 4: Calculate the average value of the missing feature(s) for the k-nearest neighbors.
averages = []
for i, missing_row in enumerate(missing_mask):
    if np.any(missing_row):
        neighbors = imputed_dataset[np.logical_not(missing_mask[i])]  # Exclude examples with missing values
        k_nearest_neighbors = neighbors[np.argsort(np.linalg.norm(neighbors - imputed_dataset[i], axis=1))[:k]]
        average = np.mean(k_nearest_neighbors[:, missing_row], axis=0)
        averages.append(average)
    else:
        averages.append([])
averages

# Step 5: Impute the missing feature value(s) of the example with the calculated average(s).
for i, missing_row in enumerate(missing_mask):
    if np.any(missing_row):
        imputed_dataset[i, missing_row] = averages[i]

# Step 7: Output the dataset with the missing values replaced by the imputed values.
print(imputed_dataset)

